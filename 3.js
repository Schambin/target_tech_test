// 3) Dado um vetor que guarda o valor de faturamento di√°rio de uma distribuidora, fa√ßa um programa, na linguagem que desejar, que calcule e retorne:
// ‚Ä¢ O menor valor de faturamento ocorrido em um dia do m√™s;
// ‚Ä¢ O maior valor de faturamento ocorrido em um dia do m√™s;
// ‚Ä¢ N√∫mero de dias no m√™s em que o valor de faturamento di√°rio foi superior √† m√©dia mensal.

// IMPORTANTE:
// a) Usar o json ou xml dispon√≠vel como fonte dos dados do faturamento mensal;
// b) Podem existir dias sem faturamento, como nos finais de semana e feriados. Estes dias devem ser ignorados no c√°lculo da m√©dia;

const fs = require("fs");

fs.readFile("dados.json", "utf8", (err, data) => {
    if (err) {
        console.error("Erro ao ler o arquivo:", err);
        return;
    }

    const faturamento = JSON.parse(data);

    const diasComFaturamento = faturamento.filter(d => d.valor > 0);

    if (diasComFaturamento.length === 0) {
        console.log("N√£o h√° dados de faturamento para an√°lise.");
        return;
    }

    const menorFaturamento = Math.min(...diasComFaturamento.map(d => d.valor));
    const maiorFaturamento = Math.max(...diasComFaturamento.map(d => d.valor));

    const somaFaturamento = diasComFaturamento.reduce((acc, d) => {
        acc + d.valor, 0
    });
    const mediaMensal = somaFaturamento / diasComFaturamento.length;

    const diasAcimaDaMedia = diasComFaturamento.filter(d => d.valor > mediaMensal).length;

    console.log("üìä An√°lise de Faturamento Mensal:");
    console.log(`‚û°Ô∏è Menor faturamento di√°rio: R$ ${menorFaturamento.toFixed(2)}`);
    console.log(`‚û°Ô∏è Maior faturamento di√°rio: R$ ${maiorFaturamento.toFixed(2)}`);
    console.log(`‚û°Ô∏è Dias com faturamento acima da m√©dia: ${diasAcimaDaMedia}`);
});
